package com.loancare.lakeview;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Bitmap;import android.net.Uri;import android.net.http.SslError;import android.os.Build;import android.os.Bundle;import android.provider.SyncStateContract;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.webkit.SslErrorHandler;import android.webkit.ValueCallback;import android.webkit.WebSettings;import android.webkit.WebView;import android.webkit.WebViewClient;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.Toast;import com.loancare.lakeview.Utils.Consts;import com.loancare.lakeview.Utils.InternetStatus;import com.loancare.lakeview.Utils.KeyboardUtils;import java.util.HashMap;import java.util.Map;public class WebviewActivity extends AppCompatActivity{    WebView webView1;    String url = "";    ProgressBar progressBar;    LinearLayout back_layout;    private static final String TAG = WebActivity.class.getSimpleName();    boolean isSessionSet = false;    final String mUrl1 = Consts.loginUrl;    final String mURLSchema1 = "toolbar://";    final String KEY_CALLBACK1 = "callback";    final String KEY_LOGOUT1 = "logout";    final String REGEX_URL_SPLITER1 = "&|\\?";    final String KEY_BACK2LOGIN1 = "backtologin";    final String KEY_BACK2LEGAL1 = "backtolegal";    final String KEY_PRIVACY = "privacy";    final String KEY_TERMSPRIVACY = "termsprivacy";    final String KEY_NMLS = "nmls";    final String KEY_CALL = "safari";    public String sessionCookie1 =  null;    public static final String register = "register";    boolean doubleBackToExitPressedOnce = false;    public final String legal = "legal";    public final String legalLogin = "legallogin";    public final String terms = "terms";    public final String termsLogin = "termslogin";    public final String help = "help";    private String urlToLoad;    Context context;    boolean status = false;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_webview);        urlToLoad = getIntent().getStringExtra("URL");        webView1 = (WebView) findViewById(R.id.webView1);         // final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);         // toolbar.setVisibility(View.INVISIBLE);         //back_layout=(LinearLayout) findViewById(R.id.back_layout);        progressBar = (ProgressBar) findViewById(R.id.progressBar1);        //finding Views        webView1.setWebContentsDebuggingEnabled(true);        webView1.setFocusable(false);        webView1.setFocusableInTouchMode(true);        webView1.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);        webView1.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);        webView1.setVerticalScrollBarEnabled(true);        webView1.setHorizontalScrollBarEnabled(true);        webView1.setScrollbarFadingEnabled(true);        WebSettings webSettings1 = webView1.getSettings();        webSettings1.setAppCacheEnabled(false);        webSettings1.setCacheMode(WebSettings.LOAD_NO_CACHE);        webSettings1.setDatabaseEnabled(true);        webSettings1.setDomStorageEnabled(true);        webSettings1.setJavaScriptEnabled(true);        webSettings1.getJavaScriptCanOpenWindowsAutomatically();        webSettings1.setAllowContentAccess(true);        webSettings1.setLoadWithOverviewMode(true);        webSettings1.setUseWideViewPort(true);        webSettings1.setBlockNetworkLoads(false);        webSettings1.setLoadsImagesAutomatically(true);        webSettings1.setPluginState(WebSettings.PluginState.ON);        webSettings1.setRenderPriority(WebSettings.RenderPriority.HIGH);        webSettings1.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);        if (Build.VERSION.SDK_INT >= 19)        {            webView1.setLayerType(View.LAYER_TYPE_HARDWARE, null);        }        else        {            webView1.setLayerType(View.LAYER_TYPE_SOFTWARE, null);        }        if( urlToLoad!= null && !urlToLoad.isEmpty())        {            if (urlToLoad.equals(legal))            {                url = Consts.legalUrl;            }            else if(urlToLoad.equals(legalLogin))            {                url = Consts.legalLoginUrl;            }            else if (urlToLoad.equals(terms))            {                url = Consts.termsUrl;            }            else if(urlToLoad.equals(termsLogin))            {                url = Consts.termsLoginUrl;            }            else if (urlToLoad.equals(register))            {                url = Consts.registerUrl;            }            else if (urlToLoad.equals(help))            {                url = Consts.needhelpUrl;            }            else if (Consts.forgot_pwd_screen.equals("forgot_password"))            {                url = Consts.pwdsecurityUrl;                Log.e("<<<<< >>>>>>>>", "forgot_password");                Consts.forgot_pwd_screen="";                Consts.Change_PWD="";            }            else if (Consts.Change_PWD.equals("change_password"))            {                url = Consts.Change_pwd_url;                Log.e("<<<<< >>>>>>>>", "change_password");                Consts.forgot_pwd_screen="";                Consts.Change_PWD="";            }        }        if (InternetStatus.InternetStatus(WebviewActivity.this))        {            webView1.setWebViewClient(new WebViewClient()            {                @Override                public void onPageStarted(WebView view, String url, Bitmap favicon)                {                    progressBar.setVisibility(View.VISIBLE);                    Log.e("<<<<< >>>>>>>>", "onPageStarted");                    super.onPageStarted(view, url, favicon);                }                @Override                public void onLoadResource(WebView view, String url)                {                    Log.i("Session", "call javascript");                    callJavascript1();                    callJavascript2();                    callJavascript3();                    super.onLoadResource(view, url);                    return;                }                @Override                public boolean shouldOverrideUrlLoading(WebView view, String url)                {                    Log.d("WVIEW", "shouldOverrideUrlLoading = " + url);                    return handleURL(url);                }                public boolean handleURL(String url)                {                    Log.e("WVIEW", "url==> = " + url);                    boolean returnStatus = true;                    Intent i = null;                    String urlStr1 = url.replace(mURLSchema1, "");                    String[] queryStrSet1 = urlStr1.split("\\?");                    String val1 = queryStrSet1[0];                    String val2 = queryStrSet1[1];                    Log.e("WVIEW", "Safari_Value1==> = " + val1);                    Log.e("WVIEW", "Safari_Value2==> = " + val2);                    if(val1.equals("safari"))                    {                        Log.e("WVIEW", "Safari_Value2==> = " + val2);                        Intent intent = new Intent(Intent.ACTION_VIEW);                        intent.setData(Uri.parse(val2));                        startActivity(intent);                    } else {                        if (url.startsWith(mURLSchema1))                            Log.e("WVIEW", "mURLSchema1 = " + mURLSchema1);                        {                            String urlStr = url.replace(mURLSchema1, "");                            String[] queryStrSet = urlStr.split(REGEX_URL_SPLITER1);                            Map<String, String> map = new HashMap<String, String>();                            for (int x = 0; queryStrSet.length > x; x = x + 2)                            {                                map.put(queryStrSet[x], queryStrSet[x + 1]);                                Log.e("WVIEW", "hashmap1==> = " + queryStrSet[x]);                                Log.e("WVIEW", "hashmap2==> = " + queryStrSet[x + 1]);                            }                          //  map.put(queryStrSet[0],queryStrSet[1]);                          //  map.put(queryStrSet[2],queryStrSet[3]);                            String val = map.get(KEY_CALLBACK1);                            Log.e("WVIEW", "val => " + val);                            if (val != null && !val.trim().isEmpty())                            {                                switch (val) {                                    case KEY_LOGOUT1:                                        i = new Intent(WebviewActivity.this, LoginActivity.class);                                        webView1.removeAllViews();                                        webView1.destroy();                                        WebviewActivity.this.finish();                                        returnStatus = true;                                        Log.d("WView", "case : " + val);                                        break;                                    case KEY_BACK2LOGIN1:                                        i = new Intent(WebviewActivity.this, LoginActivity.class);                                        returnStatus = true;                                        Log.d("WView", "case : " + val);                                        break;                                    case KEY_BACK2LEGAL1:                                        i = new Intent(WebviewActivity.this, LoginActivity.class);                                        returnStatus = true;                                        Log.d("WView", "case : " + val);                                        break;                                    case KEY_NMLS:                                        i = new Intent(Intent.ACTION_VIEW, Uri.parse                                                ("http://www.nmlsconsumeraccess.org"));                                        returnStatus = true;                                        Log.d("WView", "case : " + val);                                        break;                                    case KEY_PRIVACY:                                    case KEY_TERMSPRIVACY:                                        Log.d("KEY_PRIVACY", "KEY_PRIVACY : " + KEY_PRIVACY);                                        Consts.privacy_url = map.get("pdfName");                                        String pdf = Consts.privacy_url;                                        Consts.is_term_privacy = val.equals(KEY_TERMSPRIVACY);                                        status = true;                                       /* webView1.loadUrl("https://drive.google.com/viewerng/viewer?embedded=true&url=" + pdf);                                        returnStatus = false;*/                                        i = new Intent(WebviewActivity.this, PDFViewActivity.class);                                        returnStatus = true;                                        break;                                }                                    if (i != null)                                    startActivity(i);                                if(status) {                                    finish();                                    status = false;                                }                            }                        }                    }                    return returnStatus;                }                @Override                public void onPageFinished(WebView view, String url)                {                    super.onPageFinished(view, url);                    Log.e("<<<<< >>>>>>>>", "onPageFinished");                    // callJavascript1();                    progressBar.setVisibility(View.GONE);                }                @Override                public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)                {                    super.onReceivedSslError(view, handler, error);                    Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();                }            });            webView1.loadUrl(url);        }        else            {            // Toast.makeText(LoginActivity.this, "Please check Internet Connection !!", Toast.LENGTH_SHORT).show();            AlertDialog alertDialog = new AlertDialog.Builder(WebviewActivity.this).create();            alertDialog.setTitle("Message");            alertDialog.setMessage("Please check Internet Connection !!");            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",                    new DialogInterface.OnClickListener()                    {                        public void onClick(DialogInterface dialog, int which)                        {                            dialog.dismiss();                        }                    });            alertDialog.show();            }        KeyboardUtils.addKeyboardToggleListener(this, new KeyboardUtils.SoftKeyboardToggleListener()        {            @Override            public void onToggleSoftKeyboard(boolean isVisible)            {                Log.d("keyboard", "keyboard visible: "+isVisible);                if(isVisible)                {                     addSpace();                }                else                    {                     hideSpace();                    }            }        });       /* back_layout.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v)            {                Intent i =new Intent(WebviewActivity.this,WebviewActivity.class);                i.putExtra("URL", "legal");                startActivity(i);            }        });*/    }    private void hideSpace()    {        Log.d("back","back pressed");        String script = "if(lc!==undefined){lc.namespace.backPressed()}";        webView1.evaluateJavascript(script, new ValueCallback<String>()        {            @Override            public void onReceiveValue(String s)            {                isSessionSet = true;            }        });    }    private void addSpace()    {        Log.d("back","keyboard open");        String script = "if(lc!==undefined){lc.namespace.addSpace()}";        webView1.evaluateJavascript(script, new ValueCallback<String>()        {            @Override            public void onReceiveValue(String s)            {                isSessionSet = true;            }        });    }    private void callJavascript()    {        String script = "var sessionString = '"                + Consts.JSONResponse +  "';sessionStorage.setItem('userDetailsMobile',sessionString);console.log('session set')";        webView1.evaluateJavascript(script, new ValueCallback<String>()        {            @Override            public void onReceiveValue(String s)            {                isSessionSet = true;            }        });    }    private void callJavascript1()    {      String script = "var sessionString1 = '"     + Consts.From_native + "';sessionStorage.setItem('fromnative',sessionString1);console.log('session set')";        webView1.evaluateJavascript(script, new ValueCallback<String>()        {            @Override            public void onReceiveValue(String s)            {                isSessionSet = true;            }        });        Log.e("<<<<< >>>>>>>>","callJavascript1");    }    private void callJavascript2()    {        String script = "var sessionString1 = '"        +  Consts.JSONResponse_Fpwd + "';sessionStorage.setItem('forgotpassword_response',sessionString1);console.log('session set')";        webView1.evaluateJavascript(script, new ValueCallback<String>()        {            @Override            public void onReceiveValue(String s)            {                isSessionSet = true;            }        });        Log.e("<<<<< >>>>>>>>","callJavascript1");    }    private void callJavascript3()    {        String script = "var sessionString1 = '"                +  Consts.JSONResponse + "';sessionStorage.setItem('changepwd',sessionString1);console.log('session set')";        webView1.evaluateJavascript(script, new ValueCallback<String>()        {            @Override            public void onReceiveValue(String s)            {                isSessionSet = true;            }        });        Log.e("<<<<< >>>>>>>>","callJavascript1");    }    public boolean onKeyDown(int keyCode, KeyEvent event)    {        if ((keyCode == KeyEvent.KEYCODE_BACK) && webView1.canGoBack())        {            if (this.url.endsWith("/terms"))            {                this.url = Consts.legalUrl;                webView1.loadUrl(Consts.legalUrl);            }            else if(this.url.endsWith("/termslogin"))            {                this.url = Consts.legalLoginUrl;                webView1.loadUrl(Consts.legalLoginUrl);            }            else if (this.url.endsWith("/legalprivacy"))            {                Intent i = new Intent(WebviewActivity.this, LoginActivity.class);                webView1.removeAllViews();                webView1.destroy();                WebviewActivity.this.finish();                startActivity(i);                finish();            }            else if(this.url.endsWith("/legalprivacylogin") || this.url.endsWith(("/home")))            {                this.url = Consts.home_url;                webView1.loadUrl(Consts.home_url);            }            else {                webView1.goBack();            }            return true;        }        return super.onKeyDown(keyCode, event);    }    @Override    public void onBackPressed() {        if (this.url.endsWith("/terms"))        {            this.url = Consts.legalUrl;            webView1.loadUrl(Consts.legalUrl);        }        else if(this.url.endsWith("/termslogin"))        {            this.url = Consts.legalLoginUrl;            webView1.loadUrl(Consts.legalLoginUrl);        }        else if (this.url.endsWith("/legalprivacy"))        {            Intent i = new Intent(WebviewActivity.this, LoginActivity.class);            webView1.removeAllViews();            webView1.destroy();            WebviewActivity.this.finish();            startActivity(i);            finish();        }        else if(this.url.endsWith("/legalprivacylogin") || this.url.endsWith(("/home")))        {            this.url = Consts.home_url;            webView1.loadUrl(Consts.home_url);        }        else {            super.onBackPressed();            finish();        }    }    @Override    public void onPause()    {        super.onPause();        webView1.onPause();        webView1.pauseTimers();    }    @Override    public void onResume()    {        super.onResume();        webView1.resumeTimers();        webView1.onResume();    }}